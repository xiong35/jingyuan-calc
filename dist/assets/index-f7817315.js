var Nn=Object.defineProperty;var kn=(e,t,n)=>t in e?Nn(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var S=(e,t,n)=>(kn(e,typeof t!="symbol"?t+"":t,n),n);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))r(i);new MutationObserver(i=>{for(const s of i)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&r(o)}).observe(document,{childList:!0,subtree:!0});function n(i){const s={};return i.integrity&&(s.integrity=i.integrity),i.referrerPolicy&&(s.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?s.credentials="include":i.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function r(i){if(i.ep)return;i.ep=!0;const s=n(i);fetch(i.href,s)}})();var X,p,Qe,Je,L,le,Ye,jt,Xe,ot={},Ze=[],Sn=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i,ht=Array.isArray;function D(e,t){for(var n in t)e[n]=t[n];return e}function tn(e){var t=e.parentNode;t&&t.removeChild(e)}function Ft(e,t,n){var r,i,s,o={};for(s in t)s=="key"?r=t[s]:s=="ref"?i=t[s]:o[s]=t[s];if(arguments.length>2&&(o.children=arguments.length>3?X.call(arguments,2):n),typeof e=="function"&&e.defaultProps!=null)for(s in e.defaultProps)o[s]===void 0&&(o[s]=e.defaultProps[s]);return G(e,o,r,i,null)}function G(e,t,n,r,i){var s={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:i??++Qe};return i==null&&p.vnode!=null&&p.vnode(s),s}function In(){return{current:null}}function Z(e){return e.children}function W(e,t){this.props=e,this.context=t}function Q(e,t){if(t==null)return e.__?Q(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if((n=e.__k[t])!=null&&n.__e!=null)return n.__e;return typeof e.type=="function"?Q(e):null}function en(e){var t,n;if((e=e.__)!=null&&e.__c!=null){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if((n=e.__k[t])!=null&&n.__e!=null){e.__e=e.__c.base=n.__e;break}return en(e)}}function zt(e){(!e.__d&&(e.__d=!0)&&L.push(e)&&!ct.__r++||le!==p.debounceRendering)&&((le=p.debounceRendering)||Ye)(ct)}function ct(){var e,t,n,r,i,s,o,c;for(L.sort(jt);e=L.shift();)e.__d&&(t=L.length,r=void 0,i=void 0,o=(s=(n=e).__v).__e,(c=n.__P)&&(r=[],(i=D({},s)).__v=s.__v+1,Qt(c,s,i,n.__n,c.ownerSVGElement!==void 0,s.__h!=null?[o]:null,r,o??Q(s),s.__h),cn(r,s),s.__e!=o&&en(s)),L.length>t&&L.sort(jt));ct.__r=0}function nn(e,t,n,r,i,s,o,c,u,f){var a,y,_,l,v,T,g,h=r&&r.__k||Ze,m=h.length;for(n.__k=[],a=0;a<t.length;a++)if((l=n.__k[a]=(l=t[a])==null||typeof l=="boolean"||typeof l=="function"?null:typeof l=="string"||typeof l=="number"||typeof l=="bigint"?G(null,l,null,null,l):ht(l)?G(Z,{children:l},null,null,null):l.__b>0?G(l.type,l.props,l.key,l.ref?l.ref:null,l.__v):l)!=null){if(l.__=n,l.__b=n.__b+1,(_=h[a])===null||_&&l.key==_.key&&l.type===_.type)h[a]=void 0;else for(y=0;y<m;y++){if((_=h[y])&&l.key==_.key&&l.type===_.type){h[y]=void 0;break}_=null}Qt(e,l,_=_||ot,i,s,o,c,u,f),v=l.__e,(y=l.ref)&&_.ref!=y&&(g||(g=[]),_.ref&&g.push(_.ref,null,l),g.push(y,l.__c||v,l)),v!=null?(T==null&&(T=v),typeof l.type=="function"&&l.__k===_.__k?l.__d=u=rn(l,u,e):u=an(e,l,_,h,v,u),typeof n.type=="function"&&(n.__d=u)):u&&_.__e==u&&u.parentNode!=e&&(u=Q(_))}for(n.__e=T,a=m;a--;)h[a]!=null&&(typeof n.type=="function"&&h[a].__e!=null&&h[a].__e==n.__d&&(n.__d=on(r).nextSibling),ln(h[a],h[a]));if(g)for(a=0;a<g.length;a++)un(g[a],g[++a],g[++a])}function rn(e,t,n){for(var r,i=e.__k,s=0;i&&s<i.length;s++)(r=i[s])&&(r.__=e,t=typeof r.type=="function"?rn(r,t,n):an(n,r,r,i,r.__e,t));return t}function sn(e,t){return t=t||[],e==null||typeof e=="boolean"||(ht(e)?e.some(function(n){sn(n,t)}):t.push(e)),t}function an(e,t,n,r,i,s){var o,c,u;if(t.__d!==void 0)o=t.__d,t.__d=void 0;else if(n==null||i!=s||i.parentNode==null)t:if(s==null||s.parentNode!==e)e.appendChild(i),o=null;else{for(c=s,u=0;(c=c.nextSibling)&&u<r.length;u+=1)if(c==i)break t;e.insertBefore(i,s),o=s}return o!==void 0?o:i.nextSibling}function on(e){var t,n,r;if(e.type==null||typeof e.type=="string")return e.__e;if(e.__k){for(t=e.__k.length-1;t>=0;t--)if((n=e.__k[t])&&(r=on(n)))return r}return null}function Dn(e,t,n,r,i){var s;for(s in n)s==="children"||s==="key"||s in t||ut(e,s,null,n[s],r);for(s in t)i&&typeof t[s]!="function"||s==="children"||s==="key"||s==="value"||s==="checked"||n[s]===t[s]||ut(e,s,t[s],n[s],r)}function _e(e,t,n){t[0]==="-"?e.setProperty(t,n??""):e[t]=n==null?"":typeof n!="number"||Sn.test(t)?n:n+"px"}function ut(e,t,n,r,i){var s;t:if(t==="style")if(typeof n=="string")e.style.cssText=n;else{if(typeof r=="string"&&(e.style.cssText=r=""),r)for(t in r)n&&t in n||_e(e.style,t,"");if(n)for(t in n)r&&n[t]===r[t]||_e(e.style,t,n[t])}else if(t[0]==="o"&&t[1]==="n")s=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+s]=n,n?r||e.addEventListener(t,s?he:de,s):e.removeEventListener(t,s?he:de,s);else if(t!=="dangerouslySetInnerHTML"){if(i)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if(t!=="width"&&t!=="height"&&t!=="href"&&t!=="list"&&t!=="form"&&t!=="tabIndex"&&t!=="download"&&t!=="rowSpan"&&t!=="colSpan"&&t in e)try{e[t]=n??"";break t}catch{}typeof n=="function"||(n==null||n===!1&&t[4]!=="-"?e.removeAttribute(t):e.setAttribute(t,n))}}function de(e){return this.l[e.type+!1](p.event?p.event(e):e)}function he(e){return this.l[e.type+!0](p.event?p.event(e):e)}function Qt(e,t,n,r,i,s,o,c,u){var f,a,y,_,l,v,T,g,h,m,b,C,N,k,I,x=t.type;if(t.constructor!==void 0)return null;n.__h!=null&&(u=n.__h,c=t.__e=n.__e,t.__h=null,s=[c]),(f=p.__b)&&f(t);try{t:if(typeof x=="function"){if(g=t.props,h=(f=x.contextType)&&r[f.__c],m=f?h?h.props.value:f.__:r,n.__c?T=(a=t.__c=n.__c).__=a.__E:("prototype"in x&&x.prototype.render?t.__c=a=new x(g,m):(t.__c=a=new W(g,m),a.constructor=x,a.render=On),h&&h.sub(a),a.props=g,a.state||(a.state={}),a.context=m,a.__n=r,y=a.__d=!0,a.__h=[],a._sb=[]),a.__s==null&&(a.__s=a.state),x.getDerivedStateFromProps!=null&&(a.__s==a.state&&(a.__s=D({},a.__s)),D(a.__s,x.getDerivedStateFromProps(g,a.__s))),_=a.props,l=a.state,a.__v=t,y)x.getDerivedStateFromProps==null&&a.componentWillMount!=null&&a.componentWillMount(),a.componentDidMount!=null&&a.__h.push(a.componentDidMount);else{if(x.getDerivedStateFromProps==null&&g!==_&&a.componentWillReceiveProps!=null&&a.componentWillReceiveProps(g,m),!a.__e&&a.shouldComponentUpdate!=null&&a.shouldComponentUpdate(g,a.__s,m)===!1||t.__v===n.__v){for(t.__v!==n.__v&&(a.props=g,a.state=a.__s,a.__d=!1),a.__e=!1,t.__e=n.__e,t.__k=n.__k,t.__k.forEach(function(R){R&&(R.__=t)}),b=0;b<a._sb.length;b++)a.__h.push(a._sb[b]);a._sb=[],a.__h.length&&o.push(a);break t}a.componentWillUpdate!=null&&a.componentWillUpdate(g,a.__s,m),a.componentDidUpdate!=null&&a.__h.push(function(){a.componentDidUpdate(_,l,v)})}if(a.context=m,a.props=g,a.__P=e,C=p.__r,N=0,"prototype"in x&&x.prototype.render){for(a.state=a.__s,a.__d=!1,C&&C(t),f=a.render(a.props,a.state,a.context),k=0;k<a._sb.length;k++)a.__h.push(a._sb[k]);a._sb=[]}else do a.__d=!1,C&&C(t),f=a.render(a.props,a.state,a.context),a.state=a.__s;while(a.__d&&++N<25);a.state=a.__s,a.getChildContext!=null&&(r=D(D({},r),a.getChildContext())),y||a.getSnapshotBeforeUpdate==null||(v=a.getSnapshotBeforeUpdate(_,l)),nn(e,ht(I=f!=null&&f.type===Z&&f.key==null?f.props.children:f)?I:[I],t,n,r,i,s,o,c,u),a.base=t.__e,t.__h=null,a.__h.length&&o.push(a),T&&(a.__E=a.__=null),a.__e=!1}else s==null&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=Pn(n.__e,t,n,r,i,s,o,u);(f=p.diffed)&&f(t)}catch(R){t.__v=null,(u||s!=null)&&(t.__e=c,t.__h=!!u,s[s.indexOf(c)]=null),p.__e(R,t,n)}}function cn(e,t){p.__c&&p.__c(t,e),e.some(function(n){try{e=n.__h,n.__h=[],e.some(function(r){r.call(n)})}catch(r){p.__e(r,n.__v)}})}function Pn(e,t,n,r,i,s,o,c){var u,f,a,y=n.props,_=t.props,l=t.type,v=0;if(l==="svg"&&(i=!0),s!=null){for(;v<s.length;v++)if((u=s[v])&&"setAttribute"in u==!!l&&(l?u.localName===l:u.nodeType===3)){e=u,s[v]=null;break}}if(e==null){if(l===null)return document.createTextNode(_);e=i?document.createElementNS("http://www.w3.org/2000/svg",l):document.createElement(l,_.is&&_),s=null,c=!1}if(l===null)y===_||c&&e.data===_||(e.data=_);else{if(s=s&&X.call(e.childNodes),f=(y=n.props||ot).dangerouslySetInnerHTML,a=_.dangerouslySetInnerHTML,!c){if(s!=null)for(y={},v=0;v<e.attributes.length;v++)y[e.attributes[v].name]=e.attributes[v].value;(a||f)&&(a&&(f&&a.__html==f.__html||a.__html===e.innerHTML)||(e.innerHTML=a&&a.__html||""))}if(Dn(e,_,y,i,c),a)t.__k=[];else if(nn(e,ht(v=t.props.children)?v:[v],t,n,r,i&&l!=="foreignObject",s,o,s?s[0]:n.__k&&Q(n,0),c),s!=null)for(v=s.length;v--;)s[v]!=null&&tn(s[v]);c||("value"in _&&(v=_.value)!==void 0&&(v!==e.value||l==="progress"&&!v||l==="option"&&v!==y.value)&&ut(e,"value",v,y.value,!1),"checked"in _&&(v=_.checked)!==void 0&&v!==e.checked&&ut(e,"checked",v,y.checked,!1))}return e}function un(e,t,n){try{typeof e=="function"?e(t):e.current=t}catch(r){p.__e(r,n)}}function ln(e,t,n){var r,i;if(p.unmount&&p.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||un(r,null,t)),(r=e.__c)!=null){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(s){p.__e(s,t)}r.base=r.__P=null,e.__c=void 0}if(r=e.__k)for(i=0;i<r.length;i++)r[i]&&ln(r[i],t,n||typeof e.type!="function");n||e.__e==null||tn(e.__e),e.__=e.__e=e.__d=void 0}function On(e,t,n){return this.constructor(e,n)}function Jt(e,t,n){var r,i,s;p.__&&p.__(e,t),i=(r=typeof n=="function")?null:n&&n.__k||t.__k,s=[],Qt(t,e=(!r&&n||t).__k=Ft(Z,null,[e]),i||ot,ot,t.ownerSVGElement!==void 0,!r&&n?[n]:i?null:t.firstChild?X.call(t.childNodes):null,s,!r&&n?n:i?i.__e:t.firstChild,r),cn(s,e)}function _n(e,t){Jt(e,t,_n)}function Rn(e,t,n){var r,i,s,o,c=D({},e.props);for(s in e.type&&e.type.defaultProps&&(o=e.type.defaultProps),t)s=="key"?r=t[s]:s=="ref"?i=t[s]:c[s]=t[s]===void 0&&o!==void 0?o[s]:t[s];return arguments.length>2&&(c.children=arguments.length>3?X.call(arguments,2):n),G(e.type,c,r||e.key,i||e.ref,null)}function Hn(e,t){var n={__c:t="__cC"+Xe++,__:e,Consumer:function(r,i){return r.children(i)},Provider:function(r){var i,s;return this.getChildContext||(i=[],(s={})[t]=this,this.getChildContext=function(){return s},this.shouldComponentUpdate=function(o){this.props.value!==o.value&&i.some(function(c){c.__e=!0,zt(c)})},this.sub=function(o){i.push(o);var c=o.componentWillUnmount;o.componentWillUnmount=function(){i.splice(i.indexOf(o),1),c&&c.call(o)}}),r.children}};return n.Provider.__=n.Consumer.contextType=n}X=Ze.slice,p={__e:function(e,t,n,r){for(var i,s,o;t=t.__;)if((i=t.__c)&&!i.__)try{if((s=i.constructor)&&s.getDerivedStateFromError!=null&&(i.setState(s.getDerivedStateFromError(e)),o=i.__d),i.componentDidCatch!=null&&(i.componentDidCatch(e,r||{}),o=i.__d),o)return i.__E=i}catch(c){e=c}throw e}},Qe=0,Je=function(e){return e!=null&&e.constructor===void 0},W.prototype.setState=function(e,t){var n;n=this.__s!=null&&this.__s!==this.state?this.__s:this.__s=D({},this.state),typeof e=="function"&&(e=e(D({},n),this.props)),e&&D(n,e),e!=null&&this.__v&&(t&&this._sb.push(t),zt(this))},W.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),zt(this))},W.prototype.render=Z,L=[],Ye=typeof Promise=="function"?Promise.prototype.then.bind(Promise.resolve()):setTimeout,jt=function(e,t){return e.__v.__b-t.__v.__b},ct.__r=0,Xe=0;const wn=Object.freeze(Object.defineProperty({__proto__:null,Component:W,Fragment:Z,cloneElement:Rn,createContext:Hn,createElement:Ft,createRef:In,h:Ft,hydrate:_n,get isValidElement(){return Je},get options(){return p},render:Jt,toChildArray:sn},Symbol.toStringTag,{value:"Module"}));function Yt(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var n=function r(){if(this instanceof r){var i=[null];i.push.apply(i,arguments);var s=Function.bind.apply(t,i);return new s}return t.apply(this,arguments)};n.prototype=t.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(e).forEach(function(r){var i=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,i.get?i:{enumerable:!0,get:function(){return e[r]}})}),n}var $={},dn={exports:{}};(function(e){function t(n){return n&&n.__esModule?n:{default:n}}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports})(dn);var ft=dn.exports,Nt={exports:{}},kt={exports:{}},St={exports:{}},fe;function pt(){return fe||(fe=1,function(e){function t(n){"@babel/helpers - typeof";return e.exports=t=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(r){return typeof r}:function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},e.exports.__esModule=!0,e.exports.default=e.exports,t(n)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(St)),St.exports}var It={exports:{}},pe;function Mn(){return pe||(pe=1,function(e){var t=pt().default;function n(r,i){if(t(r)!=="object"||r===null)return r;var s=r[Symbol.toPrimitive];if(s!==void 0){var o=s.call(r,i||"default");if(t(o)!=="object")return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return(i==="string"?String:Number)(r)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports}(It)),It.exports}var ve;function Ln(){return ve||(ve=1,function(e){var t=pt().default,n=Mn();function r(i){var s=n(i,"string");return t(s)==="symbol"?s:String(s)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports}(kt)),kt.exports}var me;function vt(){return me||(me=1,function(e){var t=Ln();function n(i,s){for(var o=0;o<s.length;o++){var c=s[o];c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(i,t(c.key),c)}}function r(i,s,o){return s&&n(i.prototype,s),o&&n(i,o),Object.defineProperty(i,"prototype",{writable:!1}),i}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports}(Nt)),Nt.exports}var Dt={exports:{}},ge;function mt(){return ge||(ge=1,function(e){function t(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(Dt)),Dt.exports}var Pt={exports:{}},Ot={exports:{}},ye;function $n(){return ye||(ye=1,function(e){function t(n){if(n===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(Ot)),Ot.exports}var Ce;function gt(){return Ce||(Ce=1,function(e){var t=pt().default,n=$n();function r(i,s){if(s&&(t(s)==="object"||typeof s=="function"))return s;if(s!==void 0)throw new TypeError("Derived constructors may only return object or undefined");return n(i)}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports}(Pt)),Pt.exports}var Rt={exports:{}},be;function tt(){return be||(be=1,function(e){function t(n){return e.exports=t=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(i){return i.__proto__||Object.getPrototypeOf(i)},e.exports.__esModule=!0,e.exports.default=e.exports,t(n)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(Rt)),Rt.exports}var Ht={exports:{}},wt={exports:{}},Ee;function Un(){return Ee||(Ee=1,function(e){function t(n,r){return e.exports=t=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(s,o){return s.__proto__=o,s},e.exports.__esModule=!0,e.exports.default=e.exports,t(n,r)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports}(wt)),wt.exports}var Ae;function yt(){return Ae||(Ae=1,function(e){var t=Un();function n(r,i){if(typeof i!="function"&&i!==null)throw new TypeError("Super expression must either be null or a function");r.prototype=Object.create(i&&i.prototype,{constructor:{value:r,writable:!0,configurable:!0}}),Object.defineProperty(r,"prototype",{writable:!1}),i&&t(r,i)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports}(Ht)),Ht.exports}const Ct=Yt(wn);var H={};/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class Xt{static get cssClasses(){return{}}static get strings(){return{}}static get numbers(){return{}}static get defaultAdapter(){return{}}constructor(t={}){this.adapter_=t}init(){}destroy(){}}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class bt{static attachTo(t){return new bt(t,new Xt)}constructor(t,n=void 0,...r){this.root_=t,this.initialize(...r),this.foundation_=n===void 0?this.getDefaultFoundation():n,this.foundation_.init(),this.initialSyncWithDOM()}initialize(){}getDefaultFoundation(){throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class")}initialSyncWithDOM(){}destroy(){this.foundation_.destroy()}listen(t,n){this.root_.addEventListener(t,n)}unlisten(t,n){this.root_.removeEventListener(t,n)}emit(t,n,r=!1){let i;typeof CustomEvent=="function"?i=new CustomEvent(t,{detail:n,bubbles:r}):(i=document.createEvent("CustomEvent"),i.initCustomEvent(t,r,!1,n)),this.root_.dispatchEvent(i)}}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const Vn={ROOT:"mdc-ripple-upgraded",UNBOUNDED:"mdc-ripple-upgraded--unbounded",BG_FOCUSED:"mdc-ripple-upgraded--background-focused",FG_ACTIVATION:"mdc-ripple-upgraded--foreground-activation",FG_DEACTIVATION:"mdc-ripple-upgraded--foreground-deactivation"},Bn={VAR_LEFT:"--mdc-ripple-left",VAR_TOP:"--mdc-ripple-top",VAR_FG_SIZE:"--mdc-ripple-fg-size",VAR_FG_SCALE:"--mdc-ripple-fg-scale",VAR_FG_TRANSLATE_START:"--mdc-ripple-fg-translate-start",VAR_FG_TRANSLATE_END:"--mdc-ripple-fg-translate-end"},Te={PADDING:10,INITIAL_ORIGIN_SCALE:.6,DEACTIVATION_TIMEOUT_MS:225,FG_DEACTIVATION_MS:150,TAP_DELAY_MS:300};/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */let Mt,Lt;function qn(e){const t=e.document,n=t.createElement("div");n.className="mdc-ripple-surface--test-edge-var-bug",t.body.appendChild(n);const r=e.getComputedStyle(n),i=r!==null&&r.borderTopStyle==="solid";return n.remove(),i}function hn(e,t=!1){let n=Mt;if(typeof Mt=="boolean"&&!t)return n;if(!(e.CSS&&typeof e.CSS.supports=="function"))return;const i=e.CSS.supports("--css-vars","yes"),s=e.CSS.supports("(--css-vars: yes)")&&e.CSS.supports("color","#00000000");return i||s?n=!qn(e):n=!1,t||(Mt=n),n}function z(e=window,t=!1){if(Lt===void 0||t){let n=!1;try{e.document.addEventListener("test",null,{get passive(){n=!0}})}catch{}Lt=n}return Lt?{passive:!0}:!1}function Zt(e){return["webkitMatchesSelector","msMatchesSelector","matches"].filter(t=>t in e).pop()}function fn(e,t,n){const{x:r,y:i}=t,s=r+n.left,o=i+n.top;let c,u;return e.type==="touchstart"?(c=e.changedTouches[0].pageX-s,u=e.changedTouches[0].pageY-o):(c=e.pageX-s,u=e.pageY-o),{x:c,y:u}}const jn=Object.freeze(Object.defineProperty({__proto__:null,applyPassive:z,getMatchesProperty:Zt,getNormalizedEventCoords:fn,supportsCssVariables:hn},Symbol.toStringTag,{value:"Module"}));/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const xe=["touchstart","pointerdown","mousedown","keydown"],Ne=["touchend","pointerup","mouseup"];let et=[];class E extends Xt{static get cssClasses(){return Vn}static get strings(){return Bn}static get numbers(){return Te}static get defaultAdapter(){return{browserSupportsCssVars:()=>{},isUnbounded:()=>{},isSurfaceActive:()=>{},isSurfaceDisabled:()=>{},addClass:()=>{},removeClass:()=>{},containsEventTarget:()=>{},registerInteractionHandler:()=>{},deregisterInteractionHandler:()=>{},registerDocumentInteractionHandler:()=>{},deregisterDocumentInteractionHandler:()=>{},registerResizeHandler:()=>{},deregisterResizeHandler:()=>{},updateCssVariable:()=>{},computeBoundingRect:()=>{},getWindowPageOffset:()=>{}}}constructor(t){super(Object.assign(E.defaultAdapter,t)),this.layoutFrame_=0,this.frame_={width:0,height:0},this.activationState_=this.defaultActivationState_(),this.initialSize_=0,this.maxRadius_=0,this.activateHandler_=n=>this.activate_(n),this.deactivateHandler_=n=>this.deactivate_(n),this.focusHandler_=()=>this.handleFocus(),this.blurHandler_=()=>this.handleBlur(),this.resizeHandler_=()=>this.layout(),this.unboundedCoords_={left:0,top:0},this.fgScale_=0,this.activationTimer_=0,this.fgDeactivationRemovalTimer_=0,this.activationAnimationHasEnded_=!1,this.activationTimerCallback_=()=>{this.activationAnimationHasEnded_=!0,this.runDeactivationUXLogicIfReady_()},this.previousActivationEvent_=null}supportsPressRipple_(){return this.adapter_.browserSupportsCssVars()}defaultActivationState_(){return{isActivated:!1,hasDeactivationUXRun:!1,wasActivatedByPointer:!1,wasElementMadeActive:!1,activationEvent:null,isProgrammatic:!1}}init(){const t=this.supportsPressRipple_();if(this.registerRootHandlers_(t),t){const{ROOT:n,UNBOUNDED:r}=E.cssClasses;requestAnimationFrame(()=>{this.adapter_.addClass(n),this.adapter_.isUnbounded()&&(this.adapter_.addClass(r),this.layoutInternal_())})}}destroy(){if(this.supportsPressRipple_()){this.activationTimer_&&(clearTimeout(this.activationTimer_),this.activationTimer_=0,this.adapter_.removeClass(E.cssClasses.FG_ACTIVATION)),this.fgDeactivationRemovalTimer_&&(clearTimeout(this.fgDeactivationRemovalTimer_),this.fgDeactivationRemovalTimer_=0,this.adapter_.removeClass(E.cssClasses.FG_DEACTIVATION));const{ROOT:t,UNBOUNDED:n}=E.cssClasses;requestAnimationFrame(()=>{this.adapter_.removeClass(t),this.adapter_.removeClass(n),this.removeCssVars_()})}this.deregisterRootHandlers_(),this.deregisterDeactivationHandlers_()}registerRootHandlers_(t){t&&(xe.forEach(n=>{this.adapter_.registerInteractionHandler(n,this.activateHandler_)}),this.adapter_.isUnbounded()&&this.adapter_.registerResizeHandler(this.resizeHandler_)),this.adapter_.registerInteractionHandler("focus",this.focusHandler_),this.adapter_.registerInteractionHandler("blur",this.blurHandler_)}registerDeactivationHandlers_(t){t.type==="keydown"?this.adapter_.registerInteractionHandler("keyup",this.deactivateHandler_):Ne.forEach(n=>{this.adapter_.registerDocumentInteractionHandler(n,this.deactivateHandler_)})}deregisterRootHandlers_(){xe.forEach(t=>{this.adapter_.deregisterInteractionHandler(t,this.activateHandler_)}),this.adapter_.deregisterInteractionHandler("focus",this.focusHandler_),this.adapter_.deregisterInteractionHandler("blur",this.blurHandler_),this.adapter_.isUnbounded()&&this.adapter_.deregisterResizeHandler(this.resizeHandler_)}deregisterDeactivationHandlers_(){this.adapter_.deregisterInteractionHandler("keyup",this.deactivateHandler_),Ne.forEach(t=>{this.adapter_.deregisterDocumentInteractionHandler(t,this.deactivateHandler_)})}removeCssVars_(){const{strings:t}=E;Object.keys(t).forEach(n=>{n.indexOf("VAR_")===0&&this.adapter_.updateCssVariable(t[n],null)})}activate_(t){if(this.adapter_.isSurfaceDisabled())return;const n=this.activationState_;if(n.isActivated)return;const r=this.previousActivationEvent_;if(r&&t&&r.type!==t.type)return;if(n.isActivated=!0,n.isProgrammatic=t===null,n.activationEvent=t,n.wasActivatedByPointer=n.isProgrammatic?!1:t.type==="mousedown"||t.type==="touchstart"||t.type==="pointerdown",t&&et.length>0&&et.some(o=>this.adapter_.containsEventTarget(o))){this.resetActivationState_();return}t&&(et.push(t.target),this.registerDeactivationHandlers_(t)),n.wasElementMadeActive=this.checkElementMadeActive_(t),n.wasElementMadeActive&&this.animateActivation_(),requestAnimationFrame(()=>{et=[],!n.wasElementMadeActive&&(t.key===" "||t.keyCode===32)&&(n.wasElementMadeActive=this.checkElementMadeActive_(t),n.wasElementMadeActive&&this.animateActivation_()),n.wasElementMadeActive||(this.activationState_=this.defaultActivationState_())})}checkElementMadeActive_(t){return t&&t.type==="keydown"?this.adapter_.isSurfaceActive():!0}activate(t=null){this.activate_(t)}animateActivation_(){const{VAR_FG_TRANSLATE_START:t,VAR_FG_TRANSLATE_END:n}=E.strings,{FG_DEACTIVATION:r,FG_ACTIVATION:i}=E.cssClasses,{DEACTIVATION_TIMEOUT_MS:s}=E.numbers;this.layoutInternal_();let o="",c="";if(!this.adapter_.isUnbounded()){const{startPoint:u,endPoint:f}=this.getFgTranslationCoordinates_();o=`${u.x}px, ${u.y}px`,c=`${f.x}px, ${f.y}px`}this.adapter_.updateCssVariable(t,o),this.adapter_.updateCssVariable(n,c),clearTimeout(this.activationTimer_),clearTimeout(this.fgDeactivationRemovalTimer_),this.rmBoundedActivationClasses_(),this.adapter_.removeClass(r),this.adapter_.computeBoundingRect(),this.adapter_.addClass(i),this.activationTimer_=setTimeout(()=>this.activationTimerCallback_(),s)}getFgTranslationCoordinates_(){const{activationEvent:t,wasActivatedByPointer:n}=this.activationState_;let r;n?r=fn(t,this.adapter_.getWindowPageOffset(),this.adapter_.computeBoundingRect()):r={x:this.frame_.width/2,y:this.frame_.height/2},r={x:r.x-this.initialSize_/2,y:r.y-this.initialSize_/2};const i={x:this.frame_.width/2-this.initialSize_/2,y:this.frame_.height/2-this.initialSize_/2};return{startPoint:r,endPoint:i}}runDeactivationUXLogicIfReady_(){const{FG_DEACTIVATION:t}=E.cssClasses,{hasDeactivationUXRun:n,isActivated:r}=this.activationState_;(n||!r)&&this.activationAnimationHasEnded_&&(this.rmBoundedActivationClasses_(),this.adapter_.addClass(t),this.fgDeactivationRemovalTimer_=setTimeout(()=>{this.adapter_.removeClass(t)},Te.FG_DEACTIVATION_MS))}rmBoundedActivationClasses_(){const{FG_ACTIVATION:t}=E.cssClasses;this.adapter_.removeClass(t),this.activationAnimationHasEnded_=!1,this.adapter_.computeBoundingRect()}resetActivationState_(){this.previousActivationEvent_=this.activationState_.activationEvent,this.activationState_=this.defaultActivationState_(),setTimeout(()=>this.previousActivationEvent_=null,E.numbers.TAP_DELAY_MS)}deactivate_(t){const n=this.activationState_;if(!n.isActivated)return;const r=Object.assign({},n);n.isProgrammatic?(requestAnimationFrame(()=>this.animateDeactivation_(null,r)),this.resetActivationState_()):(this.deregisterDeactivationHandlers_(),requestAnimationFrame(()=>{this.activationState_.hasDeactivationUXRun=!0,this.animateDeactivation_(t,r),this.resetActivationState_()}))}deactivate(t=null){this.deactivate_(t)}animateDeactivation_(t,{wasActivatedByPointer:n,wasElementMadeActive:r}){(n||r)&&this.runDeactivationUXLogicIfReady_()}layout(){this.layoutFrame_&&cancelAnimationFrame(this.layoutFrame_),this.layoutFrame_=requestAnimationFrame(()=>{this.layoutInternal_(),this.layoutFrame_=0})}layoutInternal_(){this.frame_=this.adapter_.computeBoundingRect();const t=Math.max(this.frame_.height,this.frame_.width),n=()=>Math.sqrt(Math.pow(this.frame_.width,2)+Math.pow(this.frame_.height,2))+E.numbers.PADDING;this.maxRadius_=this.adapter_.isUnbounded()?t:n(),this.initialSize_=t*E.numbers.INITIAL_ORIGIN_SCALE,this.fgScale_=this.maxRadius_/this.initialSize_,this.updateLayoutCssVars_()}updateLayoutCssVars_(){const{VAR_FG_SIZE:t,VAR_LEFT:n,VAR_TOP:r,VAR_FG_SCALE:i}=E.strings;this.adapter_.updateCssVariable(t,`${this.initialSize_}px`),this.adapter_.updateCssVariable(i,this.fgScale_),this.adapter_.isUnbounded()&&(this.unboundedCoords_={left:Math.round(this.frame_.width/2-this.initialSize_/2),top:Math.round(this.frame_.height/2-this.initialSize_/2)},this.adapter_.updateCssVariable(n,`${this.unboundedCoords_.left}px`),this.adapter_.updateCssVariable(r,`${this.unboundedCoords_.top}px`))}setUnbounded(t){const{UNBOUNDED:n}=E.cssClasses;t?this.adapter_.addClass(n):this.adapter_.removeClass(n)}handleFocus(){requestAnimationFrame(()=>this.adapter_.addClass(E.cssClasses.BG_FOCUSED))}handleBlur(){requestAnimationFrame(()=>this.adapter_.removeClass(E.cssClasses.BG_FOCUSED))}}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class q extends bt{constructor(...t){super(...t),this.disabled=!1,this.unbounded_}static attachTo(t,{isUnbounded:n=void 0}={}){const r=new q(t);return n!==void 0&&(r.unbounded=n),r}static createAdapter(t){const n=Zt(HTMLElement.prototype);return{browserSupportsCssVars:()=>hn(window),isUnbounded:()=>t.unbounded,isSurfaceActive:()=>t.root_[n](":active"),isSurfaceDisabled:()=>t.disabled,addClass:r=>t.root_.classList.add(r),removeClass:r=>t.root_.classList.remove(r),containsEventTarget:r=>t.root_.contains(r),registerInteractionHandler:(r,i)=>t.root_.addEventListener(r,i,z()),deregisterInteractionHandler:(r,i)=>t.root_.removeEventListener(r,i,z()),registerDocumentInteractionHandler:(r,i)=>document.documentElement.addEventListener(r,i,z()),deregisterDocumentInteractionHandler:(r,i)=>document.documentElement.removeEventListener(r,i,z()),registerResizeHandler:r=>window.addEventListener("resize",r),deregisterResizeHandler:r=>window.removeEventListener("resize",r),updateCssVariable:(r,i)=>t.root_.style.setProperty(r,i),computeBoundingRect:()=>t.root_.getBoundingClientRect(),getWindowPageOffset:()=>({x:window.pageXOffset,y:window.pageYOffset})}}get unbounded(){return this.unbounded_}set unbounded(t){this.unbounded_=!!t,this.setUnbounded_()}setUnbounded_(){this.foundation_.setUnbounded(this.unbounded_)}activate(){this.foundation_.activate()}deactivate(){this.foundation_.deactivate()}layout(){this.foundation_.layout()}getDefaultFoundation(){return new E(q.createAdapter(this))}initialSyncWithDOM(){this.unbounded="mdcRippleIsUnbounded"in this.root_.dataset}}class Et{}Et.prototype.root_;Et.prototype.unbounded;Et.prototype.disabled;const Fn=Object.freeze(Object.defineProperty({__proto__:null,MDCRipple:q,MDCRippleFoundation:E,RippleCapableSurface:Et,util:jn},Symbol.toStringTag,{value:"Module"})),zn=Yt(Fn);var F={},ke;function Kn(){if(ke)return F;ke=1,Object.defineProperty(F,"__esModule",{value:!0});var e;(function(n){n.typeOfFunction="function",n.boolTrue=!0})(e||(e={}));function t(n,r,i){if(!i||typeof i.value!==e.typeOfFunction)throw new TypeError("Only methods can be decorated with @bind. <"+r+"> is not a method!");return{configurable:e.boolTrue,get:function(){var s=i.value.bind(this);return Object.defineProperty(this,r,{value:s,configurable:e.boolTrue,writable:e.boolTrue}),s}}}return F.bind=t,F.default=t,F}var Se;function te(){if(Se)return H;Se=1;var e=ft;Object.defineProperty(H,"__esModule",{value:!0}),H.default=H.MaterialComponent=void 0;var t=e(mt()),n=e(vt()),r=e(gt()),i=e(tt()),s=e(yt()),o=e(pt()),c=zn,u=Kn(),f=Ct,a=function(v,T,g,h){var m=arguments.length,b=m<3?T:h===null?h=Object.getOwnPropertyDescriptor(T,g):h,C;if((typeof Reflect>"u"?"undefined":(0,o.default)(Reflect))==="object"&&typeof Reflect.decorate=="function")b=Reflect.decorate(v,T,g,h);else for(var N=v.length-1;N>=0;N--)(C=v[N])&&(b=(m<3?C(b):m>3?C(T,g,b):C(T,g))||b);return m>3&&b&&Object.defineProperty(T,g,b),b},y=["disabled"],_=function(v){(0,s.default)(T,v);function T(){return(0,t.default)(this,T),(0,r.default)(this,(0,i.default)(T).apply(this,arguments))}return(0,n.default)(T,[{key:"render",value:function(h){this.classText||(this.classText=this.buildClassName(h));var m=h,b=m.className||m.class||"";m.class&&delete m.class,m.className&&delete m.className;var C=this.materialDom(m),N="attributes";return"props"in C?(N="props",C.props=C.props||{}):C.attributes=C.attributes||{},C[N].className="".concat(b," ").concat(this.getClassName(C)).split(" ").filter(function(k,I,x){return x.indexOf(k)===I&&k!==""}).join(" "),this.mdcProps.forEach(function(k){k in y||delete C[N][k]}),C}},{key:"componentDidMount",value:function(){this.props.ripple&&this.control&&(this.ripple=new c.MDCRipple(this.control))}},{key:"componentWillReceiveProps",value:function(h){if(this.MDComponent&&this.mdcNotifyProps){var m=!0,b=!1,C=void 0;try{for(var N=this.mdcNotifyProps[Symbol.iterator](),k;!(m=(k=N.next()).done);m=!0){var I=k.value;this.props[I]!==h[I]&&(this.MDComponent[I]=h[I])}}catch(xt){b=!0,C=xt}finally{try{!m&&N.return!=null&&N.return()}finally{if(b)throw C}}}var x=!0,R=!1,oe=void 0;try{for(var Tt=this.mdcProps[Symbol.iterator](),ce;!(x=(ce=Tt.next()).done);x=!0){var ue=ce.value;if(this.props[ue]!==h[ue]){this.classText=this.buildClassName(h);break}}}catch(xt){R=!0,oe=xt}finally{try{!x&&Tt.return!=null&&Tt.return()}finally{if(R)throw oe}}}},{key:"componentWillUnmount",value:function(){this.ripple&&this.ripple.destroy()}},{key:"afterComponentDidMount",value:function(){if(this.MDComponent&&this.mdcNotifyProps){var h=!0,m=!1,b=void 0;try{for(var C=this.mdcNotifyProps[Symbol.iterator](),N;!(h=(N=C.next()).done);h=!0){var k=N.value;this.MDComponent[k]=this.props[k]}}catch(I){m=!0,b=I}finally{try{!h&&C.return!=null&&C.return()}finally{if(m)throw b}}}}},{key:"setControlRef",value:function(h){this.control=h}},{key:"buildClassName",value:function(h){var m="mdc-"+this.componentName;for(var b in h)if(h.hasOwnProperty(b)){var C=h[b];typeof C=="boolean"&&C&&this.mdcProps.indexOf(b)!==-1&&(m+=" mdc-".concat(this.componentName,"--").concat(b))}return m}},{key:"getClassName",value:function(h){if(!h)return"";var m="attributes";"props"in h?(m="props",h.props=h.props||{}):h.attributes=h.attributes||{};var b=h[m]=h[m]||{},C=this.classText;return b.class&&(C+=" "+b.class),b.className&&b.className!==b.class&&(C+=" "+b.className),C}}]),T}(f.Component);H.MaterialComponent=_,a([u.bind],_.prototype,"setControlRef",null);var l=_;return H.default=l,H}var w={},Ie;function Gn(){if(Ie)return w;Ie=1;var e=ft;Object.defineProperty(w,"__esModule",{value:!0}),w.default=w.Icon=void 0;var t=e(mt()),n=e(vt()),r=e(gt()),i=e(tt()),s=e(yt()),o=Ct,c=e(te()),u=function(a){(0,s.default)(y,a);function y(){var _;return(0,t.default)(this,y),_=(0,r.default)(this,(0,i.default)(y).apply(this,arguments)),_.componentName="icon",_.mdcProps=[],_}return(0,n.default)(y,[{key:"materialDom",value:function(l){var v=["material-icons"];return l.className&&v.push(l.className),(0,o.h)("i",Object.assign({},l,{className:v.join(" ")}),l.children)}}]),y}(c.default);w.Icon=u;var f=u;return w.default=f,w}var nt={},De;function Wn(){if(De)return nt;De=1,Object.defineProperty(nt,"__esModule",{value:!0}),nt.default=e;function e(t){return"mdc-theme--".concat(t,"-bg")}return nt}var O=ft;Object.defineProperty($,"__esModule",{value:!0});var lt=$.default=$.Button=$.ButtonIcon=void 0,Qn=O(vt()),ee=O(mt()),ne=O(gt()),re=O(tt()),ie=O(yt()),Jn=Ct,Yn=O(te()),Xn=O(Gn()),Zn=O(Wn()),pn=function(e){(0,ie.default)(t,e);function t(){var n;return(0,ee.default)(this,t),n=(0,ne.default)(this,(0,re.default)(t).apply(this,arguments)),n.componentName="button__icon",n}return t}(Xn.default);$.ButtonIcon=pn;var vn=function(e){(0,ie.default)(t,e);function t(){var n;return(0,ee.default)(this,t),n=(0,ne.default)(this,(0,re.default)(t).apply(this,arguments)),n.componentName="button",n.mdcProps=["dense","raised","unelevated","outlined"],n.themeProps=["primary","secondary"],n}return(0,Qn.default)(t,[{key:"materialDom",value:function(r){var i=r.href?"a":"button",s="";return this.themeProps.forEach(function(o){o in r&&r[o]!==!1&&(s+=(0,Zn.default)(o)+" ")}),(0,Jn.h)(i,Object.assign({ref:this.setControlRef},r,{className:s}),this.props.children)}}]),t}(Yn.default);$.Button=vn;var mn=function(e){(0,ie.default)(t,e);function t(){return(0,ee.default)(this,t),(0,ne.default)(this,(0,re.default)(t).apply(this,arguments))}return t}(vn);lt=$.default=mn;mn.Icon=pn;var J={},$t={exports:{}},Ut={exports:{}},Pe;function tr(){return Pe||(Pe=1,function(e){var t=tt();function n(r,i){for(;!Object.prototype.hasOwnProperty.call(r,i)&&(r=t(r),r!==null););return r}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports}(Ut)),Ut.exports}var Oe;function er(){return Oe||(Oe=1,function(e){var t=tr();function n(){return typeof Reflect<"u"&&Reflect.get?(e.exports=n=Reflect.get.bind(),e.exports.__esModule=!0,e.exports.default=e.exports):(e.exports=n=function(i,s,o){var c=t(i,s);if(c){var u=Object.getOwnPropertyDescriptor(c,s);return u.get?u.get.call(arguments.length<3?i:o):u.value}},e.exports.__esModule=!0,e.exports.default=e.exports),n.apply(this,arguments)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports}($t)),$t.exports}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const it={animationstart:{noPrefix:"animationstart",webkitPrefix:"webkitAnimationStart",styleProperty:"animation"},animationend:{noPrefix:"animationend",webkitPrefix:"webkitAnimationEnd",styleProperty:"animation"},animationiteration:{noPrefix:"animationiteration",webkitPrefix:"webkitAnimationIteration",styleProperty:"animation"},transitionend:{noPrefix:"transitionend",webkitPrefix:"webkitTransitionEnd",styleProperty:"transition"}},gn={animation:{noPrefix:"animation",webkitPrefix:"-webkit-animation"},transform:{noPrefix:"transform",webkitPrefix:"-webkit-transform"},transition:{noPrefix:"transition",webkitPrefix:"-webkit-transition"}};function nr(e){return e.document!==void 0&&typeof e.document.createElement=="function"}function rr(e){return e in it||e in gn}function ir(e,t,n){return t[e].styleProperty in n.style?t[e].noPrefix:t[e].webkitPrefix}function sr(e,t){if(!nr(e)||!rr(t))return t;const n=t in it?it:gn,r=e.document.createElement("div");let i="";return n===it?i=ir(t,n,r):i=n[t].noPrefix in r.style?n[t].noPrefix:n[t].webkitPrefix,i}function Re(e,t){return sr(e,t)}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const ar="mdc-checkbox",rt={UPGRADED:"mdc-checkbox--upgraded",CHECKED:"mdc-checkbox--checked",INDETERMINATE:"mdc-checkbox--indeterminate",DISABLED:"mdc-checkbox--disabled",ANIM_UNCHECKED_CHECKED:"mdc-checkbox--anim-unchecked-checked",ANIM_UNCHECKED_INDETERMINATE:"mdc-checkbox--anim-unchecked-indeterminate",ANIM_CHECKED_UNCHECKED:"mdc-checkbox--anim-checked-unchecked",ANIM_CHECKED_INDETERMINATE:"mdc-checkbox--anim-checked-indeterminate",ANIM_INDETERMINATE_CHECKED:"mdc-checkbox--anim-indeterminate-checked",ANIM_INDETERMINATE_UNCHECKED:"mdc-checkbox--anim-indeterminate-unchecked"},M={NATIVE_CONTROL_SELECTOR:`.${ar}__native-control`,TRANSITION_STATE_INIT:"init",TRANSITION_STATE_CHECKED:"checked",TRANSITION_STATE_UNCHECKED:"unchecked",TRANSITION_STATE_INDETERMINATE:"indeterminate",ARIA_CHECKED_ATTR:"aria-checked",ARIA_CHECKED_INDETERMINATE_VALUE:"mixed"},He={ANIM_END_LATCH_MS:250};/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */const we=["checked","indeterminate"];class j extends Xt{static get cssClasses(){return rt}static get strings(){return M}static get numbers(){return He}static get defaultAdapter(){return{addClass:()=>{},removeClass:()=>{},setNativeControlAttr:()=>{},removeNativeControlAttr:()=>{},getNativeControl:()=>{},forceLayout:()=>{},isAttachedToDOM:()=>{}}}constructor(t){super(Object.assign(j.defaultAdapter,t)),this.currentCheckState_=M.TRANSITION_STATE_INIT,this.currentAnimationClass_="",this.animEndLatchTimer_=0,this.enableAnimationEndHandler_=!1}init(){this.currentCheckState_=this.determineCheckState_(this.getNativeControl_()),this.updateAriaChecked_(),this.adapter_.addClass(rt.UPGRADED),this.installPropertyChangeHooks_()}destroy(){this.uninstallPropertyChangeHooks_()}isChecked(){return this.getNativeControl_().checked}setChecked(t){this.getNativeControl_().checked=t}isIndeterminate(){return this.getNativeControl_().indeterminate}setIndeterminate(t){this.getNativeControl_().indeterminate=t}isDisabled(){return this.getNativeControl_().disabled}setDisabled(t){this.getNativeControl_().disabled=t,t?this.adapter_.addClass(rt.DISABLED):this.adapter_.removeClass(rt.DISABLED)}getValue(){return this.getNativeControl_().value}setValue(t){this.getNativeControl_().value=t}handleAnimationEnd(){this.enableAnimationEndHandler_&&(clearTimeout(this.animEndLatchTimer_),this.animEndLatchTimer_=setTimeout(()=>{this.adapter_.removeClass(this.currentAnimationClass_),this.enableAnimationEndHandler_=!1},He.ANIM_END_LATCH_MS))}handleChange(){this.transitionCheckState_()}installPropertyChangeHooks_(){const t=this.getNativeControl_(),n=Object.getPrototypeOf(t);we.forEach(r=>{const i=Object.getOwnPropertyDescriptor(n,r);if(Me(i)){const s={get:i.get,set:o=>{i.set.call(t,o),this.transitionCheckState_()},configurable:i.configurable,enumerable:i.enumerable};Object.defineProperty(t,r,s)}})}uninstallPropertyChangeHooks_(){const t=this.getNativeControl_(),n=Object.getPrototypeOf(t);we.forEach(r=>{const i=Object.getOwnPropertyDescriptor(n,r);Me(i)&&Object.defineProperty(t,r,i)})}transitionCheckState_(){const t=this.adapter_.getNativeControl();if(!t)return;const n=this.currentCheckState_,r=this.determineCheckState_(t);n!==r&&(this.updateAriaChecked_(),this.currentAnimationClass_.length>0&&(clearTimeout(this.animEndLatchTimer_),this.adapter_.forceLayout(),this.adapter_.removeClass(this.currentAnimationClass_)),this.currentAnimationClass_=this.getTransitionAnimationClass_(n,r),this.currentCheckState_=r,this.adapter_.isAttachedToDOM()&&this.currentAnimationClass_.length>0&&(this.adapter_.addClass(this.currentAnimationClass_),this.enableAnimationEndHandler_=!0))}determineCheckState_(t){const{TRANSITION_STATE_INDETERMINATE:n,TRANSITION_STATE_CHECKED:r,TRANSITION_STATE_UNCHECKED:i}=M;return t.indeterminate?n:t.checked?r:i}getTransitionAnimationClass_(t,n){const{TRANSITION_STATE_INIT:r,TRANSITION_STATE_CHECKED:i,TRANSITION_STATE_UNCHECKED:s}=M,{ANIM_UNCHECKED_CHECKED:o,ANIM_UNCHECKED_INDETERMINATE:c,ANIM_CHECKED_UNCHECKED:u,ANIM_CHECKED_INDETERMINATE:f,ANIM_INDETERMINATE_CHECKED:a,ANIM_INDETERMINATE_UNCHECKED:y}=j.cssClasses;switch(t){case r:if(n===s)return"";case s:return n===i?o:c;case i:return n===s?u:f;default:return n===i?a:y}}updateAriaChecked_(){this.isIndeterminate()?this.adapter_.setNativeControlAttr(M.ARIA_CHECKED_ATTR,M.ARIA_CHECKED_INDETERMINATE_VALUE):this.adapter_.removeNativeControlAttr(M.ARIA_CHECKED_ATTR)}getNativeControl_(){return this.adapter_.getNativeControl()||{checked:!1,indeterminate:!1,disabled:!1,value:null}}}function Me(e){return!!e&&typeof e.set=="function"}/**
 * @license
 * Copyright 2016 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */class se extends bt{static attachTo(t){return new se(t)}get nativeCb_(){const{NATIVE_CONTROL_SELECTOR:t}=j.strings;return this.root_.querySelector(t)}constructor(...t){super(...t),this.ripple_=this.initRipple_(),this.handleChange_,this.handleAnimationEnd_}initialSyncWithDOM(){this.handleChange_=()=>this.foundation_.handleChange(),this.handleAnimationEnd_=()=>this.foundation_.handleAnimationEnd(),this.nativeCb_.addEventListener("change",this.handleChange_),this.listen(Re(window,"animationend"),this.handleAnimationEnd_)}initRipple_(){const t=Zt(HTMLElement.prototype),n=Object.assign(q.createAdapter(this),{isUnbounded:()=>!0,isSurfaceActive:()=>this.nativeCb_[t](":active"),registerInteractionHandler:(i,s)=>this.nativeCb_.addEventListener(i,s),deregisterInteractionHandler:(i,s)=>this.nativeCb_.removeEventListener(i,s)}),r=new E(n);return new q(this.root_,r)}getDefaultFoundation(){return new j({addClass:t=>this.root_.classList.add(t),removeClass:t=>this.root_.classList.remove(t),setNativeControlAttr:(t,n)=>this.nativeCb_.setAttribute(t,n),removeNativeControlAttr:t=>this.nativeCb_.removeAttribute(t),getNativeControl:()=>this.nativeCb_,forceLayout:()=>this.root_.offsetWidth,isAttachedToDOM:()=>!!this.root_.parentNode})}get ripple(){return this.ripple_}get checked(){return this.foundation_.isChecked()}set checked(t){this.foundation_.setChecked(t)}get indeterminate(){return this.foundation_.isIndeterminate()}set indeterminate(t){this.foundation_.setIndeterminate(t)}get disabled(){return this.foundation_.isDisabled()}set disabled(t){this.foundation_.setDisabled(t)}get value(){return this.foundation_.getValue()}set value(t){this.foundation_.setValue(t)}destroy(){this.ripple_.destroy(),this.nativeCb_.removeEventListener("change",this.handleChange_),this.unlisten(Re(window,"animationend"),this.handleAnimationEnd_),super.destroy()}}const or=Object.freeze(Object.defineProperty({__proto__:null,MDCCheckbox:se,MDCCheckboxFoundation:j},Symbol.toStringTag,{value:"Module"})),cr=Yt(or);var U=ft;Object.defineProperty(J,"__esModule",{value:!0});var Kt=J.default=J.Checkbox=void 0,ur=U(mt()),lr=U(vt()),_r=U(gt()),Vt=U(tt()),Le=U(er()),dr=U(yt()),hr=cr,V=Ct,fr=U(te()),yn=function(e){(0,dr.default)(t,e);function t(){var n;return(0,ur.default)(this,t),n=(0,_r.default)(this,(0,Vt.default)(t).apply(this,arguments)),n.componentName="checkbox",n.mdcProps=["disabled"],n.mdcNotifyProps=["checked","indeterminate","disabled"],n}return(0,lr.default)(t,[{key:"componentDidMount",value:function(){(0,Le.default)((0,Vt.default)(t.prototype),"componentDidMount",this).call(this),this.control&&(this.MDComponent=new hr.MDCCheckbox(this.control)),this.afterComponentDidMount()}},{key:"componentWillUnmount",value:function(){(0,Le.default)((0,Vt.default)(t.prototype),"componentWillUnmount",this).call(this),this.MDComponent&&this.MDComponent.destroy()}},{key:"materialDom",value:function(r){return(0,V.h)("div",{ref:this.setControlRef},(0,V.h)("input",Object.assign({type:"checkbox",className:"mdc-checkbox__native-control"},r)),(0,V.h)("div",{className:"mdc-checkbox__background"},(0,V.h)("svg",{version:"1.1",className:"mdc-checkbox__checkmark",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24"},(0,V.h)("path",{className:"mdc-checkbox__checkmark-path",fill:"none",stroke:"white",d:"M1.73,12.91 8.1,19.28 22.79,4.59"})),(0,V.h)("div",{className:"mdc-checkbox__mixedmark"})))}}]),t}(fr.default);J.Checkbox=yn;var pr=yn;Kt=J.default=pr;var Y,A,Bt,$e,_t=0,Cn=[],st=[],Ue=p.__b,Ve=p.__r,Be=p.diffed,qe=p.__c,je=p.unmount;function ae(e,t){p.__h&&p.__h(A,e,_t||t),_t=0;var n=A.__H||(A.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({__V:st}),n.__[e]}function Gt(e){return _t=1,vr(An,e)}function vr(e,t,n){var r=ae(Y++,2);if(r.t=e,!r.__c&&(r.__=[n?n(t):An(void 0,t),function(c){var u=r.__N?r.__N[0]:r.__[0],f=r.t(u,c);u!==f&&(r.__N=[f,r.__[1]],r.__c.setState({}))}],r.__c=A,!A.u)){var i=function(c,u,f){if(!r.__c.__H)return!0;var a=r.__c.__H.__.filter(function(_){return _.__c});if(a.every(function(_){return!_.__N}))return!s||s.call(this,c,u,f);var y=!1;return a.forEach(function(_){if(_.__N){var l=_.__[0];_.__=_.__N,_.__N=void 0,l!==_.__[0]&&(y=!0)}}),!(!y&&r.__c.props===c)&&(!s||s.call(this,c,u,f))};A.u=!0;var s=A.shouldComponentUpdate,o=A.componentWillUpdate;A.componentWillUpdate=function(c,u,f){if(this.__e){var a=s;s=void 0,i(c,u,f),s=a}o&&o.call(this,c,u,f)},A.shouldComponentUpdate=i}return r.__N||r.__}function mr(e,t){var n=ae(Y++,3);!p.__s&&En(n.__H,t)&&(n.__=e,n.i=t,A.__H.__h.push(n))}function gr(e){return _t=5,bn(function(){return{current:e}},[])}function bn(e,t){var n=ae(Y++,7);return En(n.__H,t)?(n.__V=e(),n.i=t,n.__h=e,n.__V):n.__}function yr(){for(var e;e=Cn.shift();)if(e.__P&&e.__H)try{e.__H.__h.forEach(at),e.__H.__h.forEach(Wt),e.__H.__h=[]}catch(t){e.__H.__h=[],p.__e(t,e.__v)}}p.__b=function(e){A=null,Ue&&Ue(e)},p.__r=function(e){Ve&&Ve(e),Y=0;var t=(A=e.__c).__H;t&&(Bt===A?(t.__h=[],A.__h=[],t.__.forEach(function(n){n.__N&&(n.__=n.__N),n.__V=st,n.__N=n.i=void 0})):(t.__h.forEach(at),t.__h.forEach(Wt),t.__h=[],Y=0)),Bt=A},p.diffed=function(e){Be&&Be(e);var t=e.__c;t&&t.__H&&(t.__H.__h.length&&(Cn.push(t)!==1&&$e===p.requestAnimationFrame||(($e=p.requestAnimationFrame)||Cr)(yr)),t.__H.__.forEach(function(n){n.i&&(n.__H=n.i),n.__V!==st&&(n.__=n.__V),n.i=void 0,n.__V=st})),Bt=A=null},p.__c=function(e,t){t.some(function(n){try{n.__h.forEach(at),n.__h=n.__h.filter(function(r){return!r.__||Wt(r)})}catch(r){t.some(function(i){i.__h&&(i.__h=[])}),t=[],p.__e(r,n.__v)}}),qe&&qe(e,t)},p.unmount=function(e){je&&je(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach(function(r){try{at(r)}catch(i){t=i}}),n.__H=void 0,t&&p.__e(t,n.__v))};var Fe=typeof requestAnimationFrame=="function";function Cr(e){var t,n=function(){clearTimeout(r),Fe&&cancelAnimationFrame(t),setTimeout(e)},r=setTimeout(n,100);Fe&&(t=requestAnimationFrame(n))}function at(e){var t=A,n=e.__c;typeof n=="function"&&(e.__c=void 0,n()),A=t}function Wt(e){var t=A;e.__c=e.__(),A=t}function En(e,t){return!e||e.length!==t.length||t.some(function(n,r){return n!==e[r]})}function An(e,t){return typeof t=="function"?t(e):t}const ze=1e4,Ke=3;var P=(e=>(e.Jing="景元",e.Ting="停云",e.Shen="神君",e.Rounder="回合计数",e))(P||{}),K=(e=>(e[e.Ting1Hun=0]="Ting1Hun",e[e.TingE=1]="TingE",e))(K||{});const Tn=30,br=20;class At{constructor(t,n,r,i,s,o){S(this,"tickLeft",0);S(this,"charge",0);S(this,"buffs",{});this.name=t,this.baseATK=n,this.bonusATK=r,this.chargeNeed=i,this.chargeRate=s,this.speed=o,this.tickLeft=Math.round(ze/o)}get atk(){return this.baseATK+this.bonusATK}setSpeed(t){const n=this.tickLeft*this.speed,r=Math.round(n/t);this.speed=t,this.tickLeft=r,B.refreshUI()}increCharge(t){return this.charge+=t*this.chargeRate,this.charge>=this.chargeNeed*.95}move(t){const n=this._move(t);return this.tickLeft=Math.round(ze/this.speed),n}}const Er={color:"#a3a3a3",fontSize:"0.6em"};class xn extends At{constructor(){super(P.Rounder,0,0,0,0,100);S(this,"count",1)}_move(){return{content:`回合计数 ${this.count++}`,style:Er}}A(){return 0}Q(){}E(){return 0}}const dt=class{constructor(t){S(this,"totalDmg",0);S(this,"hints",[]);S(this,"pendingHints",[]);this.characters=t,this.sortByTick()}get queue(){return this.characters.sort()}sortByTick(){this.characters.sort((t,n)=>t.tickLeft-n.tickLeft)}tick(){const t=this.characters[0],n=t.tickLeft;this.characters.forEach(i=>{i.tickLeft-=n});const r=t.move(this);if(this.hints.push(r),this.sortByTick(),this.hints.push(...this.pendingHints.splice(0,this.pendingHints.length)),dt.refreshUI(),t instanceof xn&&t.count>233)throw alert("打到大道都磨灭了..."),window.location.reload(),new Error("打到大道都磨灭了...");return t.name===P.Rounder}tick5Turns(){let t=5;for(;t;)this.tick()&&t--}increDmg(t){this.totalDmg+=t}insertQ(t,n){this.pendingHints.push(t),this.increDmg(n),dt.refreshUI()}};let B=dt;S(B,"refreshUI",()=>{});const Ge={color:"#774dc4"};class Ar extends At{constructor(...n){super(P.Ting,...n);S(this,"lastAct","A")}_move(n){return this.lastAct==="A"?(this.E(n),this.lastAct="E"):(this.A(n),this.lastAct="A"),{content:`${this.name} ${this.lastAct}`,style:Ge}}A(n){return this.increCharge(br)&&this.Q(n),0}Q(n){const r={content:`${this.name} Q`,style:Ge};n.insertQ(r,0);const i=this.findJing(n);i.increCharge(50)&&i.Q(n),this.charge=5}E(n){return this.increCharge(Tn)&&this.Q(n),0}findJing(n){return n.characters.find(r=>r.name===P.Jing)}}const Tr={color:"#f39a47"};class xr extends At{constructor(n){super(P.Shen,n.baseATK,n.bonusATK,999,0,60);S(this,"lv",3);S(this,"aDmg",.53)}_move(n){const r=Math.floor(this.A(n));n.increDmg(r);const i={content:`${this.name} A 出 ${this.lv}段，造成了${r}点伤害`,style:Tr};return this.setLv(3),i}setLv(n){this.lv=n,this.lv>10&&(this.lv=10),this.setSpeed(30+this.lv*10)}A(n){return this.lv*this.findJing(n).atk*(this.aDmg*(1+.25*2))}Q(){throw new Error("Method not implemented.")}E(){throw new Error("Method not implemented.")}findJing(n){return n.characters.find(r=>r.name===P.Jing)}}const We={color:"#f2c053"};let qt=0;class Nr extends At{constructor(n,r,...i){super(P.Jing,...i);S(this,"eDmg",.65);S(this,"qDmg",1.44);S(this,"tingE",.35);this.ting1Hun=r,this.buffs[K.Ting1Hun]=0,qt=this.speed,n&&(this.bonusATK+=this.tingE*this.baseATK)}_move(n){const r=Math.floor(this.E(n));return this.buffs[K.Ting1Hun]--,this.buffs[K.Ting1Hun]||this.setSpeed(qt),n.increDmg(r),{content:this.name+" E 造成了 "+r+" 点伤害",style:We}}A(){return 0}Q(n){const r=this.findShen(n);r.setLv(r.lv+3);const i=Math.floor(this.atk*this.qDmg*Ke);n.increDmg(i);const s={content:`${this.name} Q 造成了 ${i} 点伤害`,style:We};this.ting1Hun&&(this.buffs[K.Ting1Hun]=2,this.setSpeed(qt+20)),n.insertQ(s,i),this.charge=5}E(n){this.increCharge(Tn)&&this.Q(n);const i=this.findShen(n);return i.setLv(i.lv+2),this.atk*this.eDmg*Ke}findShen(n){return n.characters.find(r=>r.name===P.Shen)}}var kr=0;function d(e,t,n,r,i,s){var o,c,u={};for(c in t)c=="ref"?o=t[c]:u[c]=t[c];var f={type:e,props:u,key:n,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--kr,__source:i,__self:s};if(typeof e=="function"&&(o=e.defaultProps))for(c in o)u[c]===void 0&&(u[c]=o[c]);return p.vnode&&p.vnode(f),f}function Sr({config:e}){const[t,n]=Gt(0),r=gr(null);function i(){n(Math.random()),requestAnimationFrame(()=>r.current.scrollTop=999999999999)}mr(()=>{B.refreshUI=i},[]);const s=bn(()=>{console.log(e);const o=new Ar(0,0,e.ting.chargeNeed,e.ting.chargeRate/100,e.ting.speed),c=new Nr(e.hasTing,e.ting1Hun,e.jing.atkBasic,e.jing.atkBonus,e.jing.chargeNeed,e.jing.chargeRate/100,e.jing.speed),u=new xn,f=new xr(c);return new B(e.hasTing?[o,c,u,f]:[c,u,f])},[]);return d("div",{children:[d("div",{className:"fc",style:{gap:"1rem",margin:"1rem"},children:[d(lt,{onClick:()=>s.tick(),secondary:!0,raised:!0,children:"运行1步"}),d(lt,{onClick:()=>s.tick5Turns(),secondary:!0,raised:!0,children:"运行5回合"})]}),d("div",{ref:r,className:"hints",children:s.hints.map(o=>d("p",{style:o.style,children:o.content}))}),d("h2",{children:["总伤害：",s.totalDmg]})]})}const Ir={jing:{atkBasic:1022,atkBonus:759,speed:99+27,chargeRate:100,chargeNeed:130},ting:{speed:112+24,chargeRate:117.9,chargeNeed:130},hasTing:!0,ting1Hun:!0};function Dr(){const[e,t]=Gt(Ir);function n(o,c,u,f=!0){f&&(u=Number(u));const a=JSON.parse(JSON.stringify(e));o?a[o][c]=u:a[c]=u,t(a),s()}const[r,i]=Gt(0);function s(){i(Math.floor(Math.random()*1e3))}return d("main",{children:[d("h1",{children:"景元伤害计算器"}),d("a",{href:"https://github.com/xiong35/jingyuan-calc",children:"https://github.com/xiong35/jingyuan-calc"}),d("table",{children:[d("colgroup",{children:[d("col",{span:1,style:{width:"50%"}}),d("col",{span:1,style:{width:"25%"}}),d("col",{span:1,style:{width:"25%"}})]}),d("tbody",{children:[d("tr",{children:[d("th",{children:"属性/角色"}),d("th",{children:"景元"}),d("th",{children:d("div",{className:"fc",style:{opacity:e.hasTing?void 0:.5},children:["停云",d(Kt,{checked:e.hasTing,onClick:()=>n(null,"hasTing",!e.hasTing,!1)})]})})]}),d("tr",{children:[d("td",{children:"攻击白字"}),d("td",{children:d("input",{type:"number",value:e.jing.atkBasic,onChange:o=>n("jing","atkBasic",o.target.value)})}),d("td",{children:"/"})]}),d("tr",{children:[d("td",{children:"攻击绿字"}),d("td",{children:d("input",{type:"number",value:e.jing.atkBonus,onChange:o=>{n("jing","atkBonus",o.target.value)}})}),d("td",{children:"/"})]}),d("tr",{children:[d("td",{children:"充能效率"}),d("td",{children:d("input",{type:"number",value:e.jing.chargeRate,onChange:o=>n("jing","chargeRate",o.target.value)})}),d("td",{children:d("input",{disabled:!e.hasTing,type:"number",value:e.ting.chargeRate,onChange:o=>n("ting","chargeRate",o.target.value)})})]}),d("tr",{children:[d("td",{children:"速度"}),d("td",{children:d("input",{type:"number",value:e.jing.speed,onChange:o=>n("jing","speed",o.target.value)})}),d("td",{children:d("input",{disabled:!e.hasTing,type:"number",value:e.ting.speed,onChange:o=>n("ting","speed",o.target.value)})})]}),d("tr",{children:[d("td",{children:"停云 1 魂"}),d("td",{children:"/"}),d("td",{children:d(Kt,{disabled:!e.hasTing,checked:e.ting1Hun,onClick:()=>n(null,"ting1Hun",!e.ting1Hun,!1)})})]})]})]}),d(lt,{onClick:()=>s(),style:{marginTop:"1rem"},raised:!0,children:"开始计算"}),d(Sr,{config:e},r)]})}Jt(d(Dr,{}),document.getElementById("app"));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
